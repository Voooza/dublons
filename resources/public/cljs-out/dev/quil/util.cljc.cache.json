["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$Processing",["^ ","~$prototype",["^ ","~$PConstants",["^ "]]]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$quil.util","~:imports",null,"~:requires",["^ ","~$cstr","~$clojure.string","^?","^?"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$clj-compilation?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/voooza/dev/dublons/resources/public/cljs-out/dev/quil/util.cljc","~:line",76,"~:column",7,"~:end-line",76,"~:end-column",23,"~:arglists",["~#list",["~$quote",["^L",[[]]]]]],"^:","~$quil.util/clj-compilation?","~:variadic",false,"^F","resources/public/cljs-out/dev/quil/util.cljc","^J",23,"~:method-params",["^L",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^L",[null,null]],"^H",1,"^G",76,"^I",76,"~:max-fixed-arity",0,"~:fn-var",true,"^K",["^L",["^M",["^L",[[]]]]]],"~$make-quil-constant-map",["^ ","^D",null,"^E",["^ ","^F","/home/voooza/dev/dublons/resources/public/cljs-out/dev/quil/util.cljc","^G",102,"^H",7,"^I",102,"^J",29,"^K",["^L",["^M",["^L",[["~$target","~$const-map-name","~$const-map"]]]]]],"^:","~$quil.util/make-quil-constant-map","^O",false,"^F","resources/public/cljs-out/dev/quil/util.cljc","^J",29,"^P",["^L",[["^V","^W","^X"]]],"^Q",null,"^R",["^L",[null,null]],"^H",1,"^G",102,"^I",102,"^S",3,"^T",true,"^K",["^L",["^M",["^L",[["^V","^W","^X"]]]]]],"~$initial-internal-state",["^ ","^:","~$quil.util/initial-internal-state","^F","resources/public/cljs-out/dev/quil/util.cljc","^G",9,"^H",1,"^I",9,"^J",28,"^E",["^ ","^F","/home/voooza/dev/dublons/resources/public/cljs-out/dev/quil/util.cljc","^G",9,"^H",6,"^I",9,"^J",28],"~:doc","Internal state map used to initiate all sketches.","~:tag","~$cljs.core/IMap"],"~$print-definition-list",["^ ","^D",null,"^E",["^ ","^F","/home/voooza/dev/dublons/resources/public/cljs-out/dev/quil/util.cljc","^G",65,"^H",7,"^I",65,"^J",28,"^K",["^L",["^M",["^L",[["~$definitions"]]]]]],"^:","~$quil.util/print-definition-list","^O",false,"^F","resources/public/cljs-out/dev/quil/util.cljc","^J",28,"^P",["^L",[["^14"]]],"^Q",null,"^R",["^L",[null,null]],"^H",1,"^G",65,"^I",65,"^S",1,"^T",true,"^K",["^L",["^M",["^L",[["^14"]]]]]],"~$generate-quil-constants",["^ ","^D",null,"^E",["^ ","^F","/home/voooza/dev/dublons/resources/public/cljs-out/dev/quil/util.cljc","^G",109,"^H",11,"^I",109,"^J",34,"~:macro",true,"^K",["^L",["^M",["^L",[["^V","~$&","~$opts"]]]]],"~:top-fn",["^ ","^O",true,"^S",3,"^P",[["^L",["~$&form","~$&env","^V","^18"]]],"^K",["^L",[["^1:","^1;","^V","~$&","^18"]]],"^R",["^L",[null]]]],"^:","~$quil.util/generate-quil-constants","^O",true,"^F","resources/public/cljs-out/dev/quil/util.cljc","^J",34,"^19",["^ ","^O",true,"^S",3,"^P",[["^L",["^1:","^1;","^V","^18"]]],"^K",["^L",[["^1:","^1;","^V","~$&","^18"]]],"^R",["^L",[null]]],"^P",[["^L",["^1:","^1;","^V","^18"]]],"^Q",null,"^R",["^L",[null]],"^H",1,"^G",109,"^17",true,"^I",109,"^S",3,"^T",false,"^K",["^L",[["^1:","^1;","^V","~$&","^18"]]]],"~$resolve-constant-key",["^ ","^D",null,"^E",["^ ","^F","/home/voooza/dev/dublons/resources/public/cljs-out/dev/quil/util.cljc","^G",32,"^H",7,"^I",32,"^J",27,"^K",["^L",["^M",["^L",[["~$key","~$mappings"]]]]],"^10","Returns the val associated with key in mappings or key directly if it\n  is one of the vals in mappings. Otherwise throws an exception."],"^:","~$quil.util/resolve-constant-key","^O",false,"^F","resources/public/cljs-out/dev/quil/util.cljc","^J",27,"^P",["^L",[["^1>","^1?"]]],"^Q",null,"^R",["^L",[null,null]],"^H",1,"^G",32,"^I",32,"^S",2,"^T",true,"^K",["^L",["^M",["^L",[["^1>","^1?"]]]]],"^10","Returns the val associated with key in mappings or key directly if it\n  is one of the vals in mappings. Otherwise throws an exception."],"~$no-fn",["^ ","^D",null,"^E",["^ ","^F","/home/voooza/dev/dublons/resources/public/cljs-out/dev/quil/util.cljc","^G",5,"^H",7,"^I",5,"^J",12,"^K",["^L",["^M",["^L",[[]]]]],"^10","Function that does nothing."],"^:","~$quil.util/no-fn","^O",false,"^F","resources/public/cljs-out/dev/quil/util.cljc","^J",12,"^P",["^L",[[]]],"^Q",null,"^R",["^L",[null,null]],"^H",1,"^G",5,"^I",5,"^S",0,"^T",true,"^K",["^L",["^M",["^L",[[]]]]],"^10","Function that does nothing."],"~$prepare-quil-clj-constants",["^ ","^D",null,"^E",["^ ","^F","/home/voooza/dev/dublons/resources/public/cljs-out/dev/quil/util.cljc","^G",90,"^H",7,"^I",90,"^J",33,"^K",["^L",["^M",["^L",[["~$constants"]]]]]],"^:","~$quil.util/prepare-quil-clj-constants","^O",false,"^F","resources/public/cljs-out/dev/quil/util.cljc","^J",33,"^P",["^L",[["^1D"]]],"^Q",null,"^R",["^L",[null,null]],"^H",1,"^G",90,"^I",90,"^S",1,"^T",true,"^K",["^L",["^M",["^L",[["^1D"]]]]]],"~$prepare-quil-cljs-constants",["^ ","^D",null,"^E",["^ ","^F","/home/voooza/dev/dublons/resources/public/cljs-out/dev/quil/util.cljc","^G",96,"^H",7,"^I",96,"^J",34,"^K",["^L",["^M",["^L",[["^1D"]]]]]],"^:","~$quil.util/prepare-quil-cljs-constants","^O",false,"^F","resources/public/cljs-out/dev/quil/util.cljc","^J",34,"^P",["^L",[["^1D"]]],"^Q",null,"^R",["^L",[null,null]],"^H",1,"^G",96,"^I",96,"^S",1,"^T",true,"^K",["^L",["^M",["^L",[["^1D"]]]]]],"~$length-of-longest-key",["^ ","^D",null,"^E",["^ ","^F","/home/voooza/dev/dublons/resources/public/cljs-out/dev/quil/util.cljc","^G",44,"^H",8,"^I",44,"^J",29,"~:private",true,"^K",["^L",["^M",["^L",[["~$m"]]]]],"^10","Returns the length of the longest key of map m. Assumes m's keys are strings\n   and returns 0 if map is empty:\n   (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0"],"^1I",true,"^:","~$quil.util/length-of-longest-key","^O",false,"^F","resources/public/cljs-out/dev/quil/util.cljc","^J",29,"^P",["^L",[["~$m"]]],"^Q",null,"^R",["^L",[null,null]],"^H",1,"^G",44,"^I",44,"^S",1,"^T",true,"^K",["^L",["^M",["^L",[["~$m"]]]]],"^10","Returns the length of the longest key of map m. Assumes m's keys are strings\n   and returns 0 if map is empty:\n   (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0"],"~$gen-padding",["^ ","^D",null,"^E",["^ ","^F","/home/voooza/dev/dublons/resources/public/cljs-out/dev/quil/util.cljc","^G",53,"^H",8,"^I",53,"^J",19,"^1I",true,"^K",["^L",["^M",["^L",[["~$len"],["^1L","~$pad"],["~$s","^1L","^1M"]]]]],"^10","Generates a padding string starting concatting s with len times pad:\n   (gen-padding \"\" 5 \"b\") ;=> \"bbbbb\"\n   May be called without starting string s in which case it defaults to the\n   empty string and also without pad in which case it defaults to a single space","^19",["^ ","^O",false,"^S",3,"^P",["^L",[["^1L"],["^1L","^1M"],["~$s","^1L","^1M"]]],"^K",["^L",[["^1L"],["^1L","^1M"],["~$s","^1L","^1M"]]],"^R",["^L",[null,null,null]]]],"^1I",true,"^:","~$quil.util/gen-padding","^O",false,"^F","resources/public/cljs-out/dev/quil/util.cljc","^J",19,"^19",["^ ","^O",false,"^S",3,"^P",["^L",[["^1L"],["^1L","^1M"],["~$s","^1L","^1M"]]],"^K",["^L",[["^1L"],["^1L","^1M"],["~$s","^1L","^1M"]]],"^R",["^L",[null,null,null]]],"^P",["^L",[["^1L"],["^1L","^1M"],["~$s","^1L","^1M"]]],"^Q",null,"^R",["^L",[null,null,null]],"^H",1,"^G",53,"^I",53,"^S",3,"^T",true,"^K",["^L",[["^1L"],["^1L","^1M"],["~$s","^1L","^1M"]]],"^10","Generates a padding string starting concatting s with len times pad:\n   (gen-padding \"\" 5 \"b\") ;=> \"bbbbb\"\n   May be called without starting string s in which case it defaults to the\n   empty string and also without pad in which case it defaults to a single space"],"~$prepare-quil-name",["^ ","^D",null,"^E",["^ ","^F","/home/voooza/dev/dublons/resources/public/cljs-out/dev/quil/util.cljc","^G",85,"^H",7,"^I",85,"^J",24,"^K",["^L",["^M",["^L",[["~$const-keyword"]]]]]],"^:","~$quil.util/prepare-quil-name","^O",false,"^F","resources/public/cljs-out/dev/quil/util.cljc","^J",24,"^P",["^L",[["^1P"]]],"^Q",null,"^R",["^L",[null,null]],"^H",1,"^G",85,"^I",85,"^S",1,"^T",true,"^K",["^L",["^M",["^L",[["^1P"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^9",["~:frame-rate","~:else","~$do","~$js/Processing.prototype.PConstants","~:looping?","~:clj","~$cljs.core/aget","~$def"]],"~:order",["^1V","^1Z","^1W","^20","^1Y","^21","^1[","^1X"]],"^10","Utility fns"]